[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mysite",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a site, like any other. Only more so."
  },
  {
    "objectID": "20220827intro.html",
    "href": "20220827intro.html",
    "title": "Introduction",
    "section": "",
    "text": "UX\nI wanted the site to look good, on desktop and on mobile, and be fast and responsive; a static site and something simple were essential.\n\n\nSimple\nI took a hard look at hugo, but it's overkill. It clearly can do everything I would ever want, there's even native support for org mode files. But what I wanted was something with great defaults, minimal setup time, that easily let me use the authoring and scripting tools I'm comfortable with, and I didn't want to spend a zillion hours finding the right theme, learning a sophisticated templating language, that sort of thing. I may go back to hugo one day, if my needs outgrow what I'm using now; the \"stack\" (I am somwehat embarrassed to call my tech selection a stack) is simpler (well, in some sense of that word: it combines tools written in haskell, lua, deno/typescript, python, and dart, and maybe more that I haven't uncovered yet).\n\n\nCost\nI wanted to have good free hosting options. Github pages looks promising."
  },
  {
    "objectID": "20220827how.html",
    "href": "20220827how.html",
    "title": "My workflow for this site",
    "section": "",
    "text": "Authoring\nWhen I write, I write in org, mostly. While there are times that an outline is not the right scaffolding for what I'm writing, but those times are rare, and I have come to accept, over the years, that if I can't lay out an outline of what I want to think, it may be because I haven't really thought things through.\nThey're great for literate programming, but I was not willing to do pure writing in Jupyter notebooks (if I had been, I could probably have done this all with only nbdev, which would have made a number of things easy). Literate programming is useful when you want your code to have well-written documentation, but if there's not going to be any code, the editing capabilities of Jupyter+chrome or Jupyter+vscode, using straight markdown, are, well, pretty weak.\nI've been using GNU Emacs since 1984 or so; I know it really well, and for editing, it feels like it's built into my fingers. Especially with org mode, which makes navigation, manipulating structure, and lightweight formatting joyfully easy.\nIt helps that I'm comfortable mucking around in emacs lisp as needed to make it do what I want. Honestly, sometimes the mucking around in emacs lisp is the actual goal; I think my .emacs is my most frequently changed file.\n\n\nEmacs hacks\nI did some emacs hacking to make good-looking markdown files out of org files.\nMy first observation is that Org's default markdown exporter is, well, crap. You can find a number of alternatives, but I quickly discovered that pandoc does a really outstanding job, at least for the org files I've been writing. Note that I haven't yet used org tables, or the org-babel literate programming features, or dozens of other amazing features in org mode.\nHowever, it turns out that by default, pandoc does not pull the #+title info from the org file to populate the markdown frontmatter (which is supposed to look like:\n---\ntitle: a document\n---\nBut, because, of course it does, pandoc has a templating system built in, and fixing markdown output to include properly formatted frontmatter was a matter of making a custom markdown template with a small change from default. Honestly, I'm not sure why this is not a bug, but it's easy to specify a local template.\nQuarto can run scripts before or after your site is rendered, and I'd initially thought that would run whenever an org file was updated in the content tree. But it turns out that the quarto change watcher only looks for changes to or additions of file types it knows about. But I found another use for pre-render scripts, which I'll share in a minute.\nSo instead, I wrote an emacs function that gets called whenever an org file is saved. It figures out if the org file is part of a quarto site, and if it is, it runs pandoc, using the appropriate template, to generate a markdown file. I've included it below. I'll put it up in github, perhaps in a separate repo, because others might find it useful.\nThis is nice because when quarto is run in preview mode, it watches the site directory, and re-renders the site whenever a new markdown file is added, or an existing one is changed. Your browser just reloads with the new contant, like magic.\nNote to self: should I be worried about the public image that comes from publishing emacs lisp code? This is not a new hotness, like Rust or Typescript.\n\n\nHere's the emacs lisp code\n\n;;; below should perhaps go in a separate libary, but whatever.\n;;; an after-save-hook that uses pandoc to make a markdown version of org files after save.\n;;; It uses a template I created that preserves the title in a format that quarto likes\n(defcustom pandoc-binary \"pandoc\" \"Location of pandoc binary\"\n  :type 'string)\n\n(defcustom markdown-template (expand-file-name \"~/lib/pandoc-org-template\")\n  \"Location of custom pandoc markdown template\"\n  :type 'string)\n\n(defcustom always-convert-org-to-md nil\n  \"If non-nil, auto-markdown-after-save will convert the org file to md regardless of\nwhether or not there is a _quarto.yml file in the current directory\"\n  :type 'boolean)\n\n(defun auto-markdown-after-save ()\n  \"Use Pandoc to auto-convert an org file to markdown every time it's saved; \nSet `after-save-hook` in org mode to this value if you use quarto with org\"\n  (interactive)\n  (when (and (eq major-mode 'org-mode)\n         (or always-convert-org-to-md (file-exists-p \"_quarto.yml\")))\n    (let* ((errbuf (get-buffer-create \"*Pandoc Errors*\"))\n       (ofile (concat (file-name-sans-extension (buffer-file-name)) \".md\")))\n      (message \"converting org file to markdown...\")\n      (call-process pandoc-binary nil errbuf nil\n            (concat \"--template=\" markdown-template)\n            \"-o\"\n            ofile\n            (buffer-file-name))\n      (message \"converting org file to markdown...done\"))))\n\n\n\nOther bits of the authoring workflow\nI really like the left-hand-side site navigation tree that quarto displays, but it would appear that it's not generated automatically, it has to be manually created. There's a yml format for this and other site metadata.\nI wrote a prerender script (remmeber those, from a few paragraphs ago?).\n\n\nPrerender script\nDon't judge. This does not have robust error handling, and has a bunch of other sharp edges. That's OK. The author is the only customer, and he forgives himself in advance for any shortcomings.\n\n#!/usr/bin/env python\n\nimport os, sys\nfrom pathlib import Path\n\ntocfile = 'sidebar.yml'\nnewtocfile = tocfile + '.new'\nbackuptocfile = tocfile + '.orig'\n\ndef createtocfromdir(dir, indentlevel):\n    retval = ''\n    path = Path(dir)\n    for p in sorted(path.iterdir()):\n        if p.name[0] == '.' or p.name[0] == '_':\n            pass\n        elif p.suffix == \".md\":\n            retval += ' ' * indentlevel + '- ' + (str(p)) + '\\n'\n        elif p.is_dir():\n            retval += ' ' * indentlevel + '- section: ' + (str(p)) + '\\n'\n            retval += ' ' * (indentlevel+2) + 'contents:' + '\\n'\n            retval += createtocfromdir(p, indentlevel+2)\n        else:\n            pass\n    return retval\n\ntocbody = createtocfromdir(\".\", 6)\n\nif len(tocbody) < 4:\n    print(\"exiting\")\n    sys.exit()\n\nwith open(newtocfile, \"w\") as f:\n    print(\"website:\",file=f)\n    print(\"  sidebar:\", file=f)\n    print(\"    contents:\", file=f)\n    print(createtocfromdir(\".\", 6), file=f)\n\nos.rename(tocfile, backuptocfile)\nos.rename(newtocfile, tocfile)\n\n\n\nFile order\nFile names appear in lexicographic order in the quarto table of contents, so I prefix file names with a number as a way of manually setting the ordering; right now I'm using YYYYMMDDfile.org, based on the thought that I'm trying to do something a bit bloggish, or at least chronologically sequential.\nnbdev recommends its users just use two-digit numerics as prefixes for setting file order. If I end up writing things that are more like articles than journal entries, I will try that."
  },
  {
    "objectID": "20220827how.html#emacs-hacks",
    "href": "20220827how.html#emacs-hacks",
    "title": "My workflow, or how this works",
    "section": "Emacs hacks",
    "text": "Emacs hacks\nI will make this a separate github repo, because it might be useful to other people, but in a nutshell, it's:\n\n;;; below should perhaps go in a separate libary, but whatever.\n;;; an after-save-hook that uses pandoc to make a markdown version of org files after save.\n;;; It uses a template I created that preserves the title in a format that quarto likes\n(defcustom pandoc-binary \"pandoc\" \"Location of pandoc binary\"\n  :type 'string)\n\n(defcustom markdown-template (expand-file-name \"~/lib/pandoc-org-template\")\n  \"Location of custom pandoc markdown template\"\n  :type 'string)\n\n(defcustom always-convert-org-to-md nil\n  \"If non-nil, auto-markdown-after-save will convert the org file to md regardless of\nwhether or not there is a _quarto.yml file in the current directory\"\n  :type 'boolean)\n\n(defun auto-markdown-after-save ()\n  \"Use Pandoc to auto-convert an org file to markdown every time it's saved; \nSet `after-save-hook` in org mode to this value if you use quarto with org\"\n  (interactive)\n  (when (and (eq major-mode 'org-mode)\n         (or always-convert-org-to-md (file-exists-p \"_quarto.yml\")))\n    (let* ((errbuf (get-buffer-create \"*Pandoc Errors*\"))\n       (ofile (concat (file-name-sans-extension (buffer-file-name)) \".md\")))\n      (message \"converting org file to markdown...\")\n      (call-process pandoc-binary nil errbuf nil\n            (concat \"--template=\" markdown-template)\n            \"-o\"\n            ofile\n            (buffer-file-name))\n      (message \"converting org file to markdown...done\"))))"
  },
  {
    "objectID": "20220827Intro.html",
    "href": "20220827Intro.html",
    "title": "Introduction",
    "section": "",
    "text": "UX\nI wanted the site to look good, on desktop and on mobile, and be fast and responsive; a static site and something simple were essential.\n\n\nSimple\nI took a hard look at hugo, but it's overkill. It clearly can do everything I would ever want, there's even native support for org mode files. But what I wanted was something with great defaults, minimal setup time, that easily let me use the authoring and scripting tools I'm comfortable with, and I didn't want to spend a zillion hours finding the right theme, learning a sophisticated templating language, that sort of thing. I may go back to hugo one day, if my needs outgrow what I'm using now; the \"stack\" (I am somwehat embarrassed to call my tech selection a stack) is simpler (well, in some sense of that word: it combines tools written in haskell, lua, deno/typescript, python, and dart, and maybe more that I haven't uncovered yet).\n\n\nCost\nI wanted to have good free hosting options. Github pages looks promising."
  },
  {
    "objectID": "20220827Workflow.html",
    "href": "20220827Workflow.html",
    "title": "My workflow for this site",
    "section": "",
    "text": "Authoring\nI write in org, mostly. While there are times that an outline is not the right scaffolding, those times are rare, and I have come to accept, over the years, that if I can't lay out an outline of what I want to think, it may be because I haven't really thought things through.\nNotebooks are great for literate programming, but I was not willing to do pure writing in Jupyter notebooks (if I had been, I could have done this all with only nbdev, which would have made a number of things easy). Literate programming is useful when you want your code to have well-written documentation, but if there's not going to be any code, the editing capabilities of Jupyter+chrome or Jupyter+vscode, using straight markdown, are, well, pretty weak in comparison to emacs.\nI've been using GNU Emacs since 1984 or so; I know it really well, and for editing, it feels like it's built into my fingers. Especially with org mode, which makes navigation, manipulating structure, and lightweight formatting joyfully easy.\nIt helps that I'm comfortable mucking around in emacs lisp as needed to make it do what I want. Honestly, sometimes the mucking around in emacs lisp is the most fun.\n\n\nEmacs hacks\nI ended up doing some emacs hacking to make good-looking markdown files out of org files.\nMy first observation is that Org's default markdown exporter is, well, crap. You can find a number of alternatives, but I quickly discovered that pandoc does a really outstanding job, at least for the org files I've been writing. Note that I haven't yet used org tables, or the org-babel literate programming features, or dozens of other amazing features in org mode, which might be harder for pandoc to deal with.\nHowever, it turns out that by default, pandoc does not pull the #+title info from the org file to populate the markdown frontmatter, which is supposed to look like:\n---\ntitle: a document\n---\nBut, because, of course it does, pandoc has a templating system, and fixing markdown output to create properly formatted frontmatter was a matter of making a custom markdown template with a small change from default. Honestly, I'm not sure why the default behavior is not a bug, but it's easy to specify a local template.\nQuarto can run scripts before or after your site is rendered, and I'd initially thought that would run whenever an org file was updated in the content tree. But it turns out that the quarto change watcher only looks for changes to or additions of its native file types (.md, .qmd, etc). (I did find another use for pre-render scripts, which I'll share in a minute.)\nSo instead, I wrote a function that gets called whenever an org file is saved. It figures out if the org file is part of a quarto site, and if it is, it runs pandoc, using the appropriate template, to generate a markdown file. I've included it below. I'll put it up in github, perhaps in a separate repo, because others might find it useful. Some might not like that the .org \"source\" files are in the same directory as the output markdown files, but that doesn't bother me.\nThis is nice because when quarto is run locally in preview mode, it watches the site directory, and re-renders the site whenever a new markdown file is added, or an existing one is changed. Your browser just reloads with the new contant, like magic.\nNote to self: should I be worried about the public image that comes from publishing emacs lisp code? This is not a new hotness, like Rust or Typescript.\n\n\nHere's the emacs lisp code\n\n;;; below should perhaps go in a separate libary, but whatever.\n;;; an after-save-hook that uses pandoc to make a markdown version of org files after save.\n;;; It uses a template I created that preserves the title in a format that quarto likes\n(defcustom pandoc-binary \"pandoc\" \"Location of pandoc binary\"\n  :type 'string)\n\n(defcustom markdown-template (expand-file-name \"~/lib/pandoc-org-template\")\n  \"Location of custom pandoc markdown template\"\n  :type 'string)\n\n(defcustom always-convert-org-to-md nil\n  \"If non-nil, auto-markdown-after-save will convert the org file to md regardless of\nwhether or not there is a _quarto.yml file in the current directory\"\n  :type 'boolean)\n\n(defun auto-markdown-after-save ()\n  \"Use Pandoc to auto-convert an org file to markdown every time it's saved; \nSet `after-save-hook` in org mode to this value if you use quarto with org\"\n  (interactive)\n  (when (and (eq major-mode 'org-mode)\n         (or always-convert-org-to-md (file-exists-p \"_quarto.yml\")))\n    (let* ((errbuf (get-buffer-create \"*Pandoc Errors*\"))\n       (ofile (concat (file-name-sans-extension (buffer-file-name)) \".md\")))\n      (message \"converting org file to markdown...\")\n      (call-process pandoc-binary nil errbuf nil\n            \"-s\"\n            \"-o\"\n            ofile\n            (buffer-file-name))\n      (message \"converting org file to markdown...done\"))))\n\n\n\nOther bits of the authoring workflow\nI really like the left-hand-side site navigation tree that quarto displays, but it would appear that it's not generated automatically, it has to be manually created. There's a yml format for this and other site metadata.\nI wrote a prerender script (remmeber those, from a few paragraphs ago?).\n\n\nPrerender script\nDon't judge. This does not have robust error handling, and has a bunch of other sharp edges. That's OK. The author is the only customer, and he forgives himself in advance for any shortcomings.\n\n#!/usr/bin/env python\n\nimport os, sys\nfrom pathlib import Path\n\ntocfile = 'sidebar.yml'\nnewtocfile = tocfile + '.new'\nbackuptocfile = tocfile + '.orig'\n\ndef createtocfromdir(dir, indentlevel):\n    retval = ''\n    path = Path(dir)\n    for p in sorted(path.iterdir()):\n        if p.name[0] == '.' or p.name[0] == '_':\n            pass\n        elif p.suffix == \".md\":\n            retval += ' ' * indentlevel + '- ' + (str(p)) + '\\n'\n        elif p.is_dir():\n            retval += ' ' * indentlevel + '- section: ' + (str(p)) + '\\n'\n            retval += ' ' * (indentlevel+2) + 'contents:' + '\\n'\n            retval += createtocfromdir(p, indentlevel+2)\n        else:\n            pass\n    return retval\n\ntocbody = createtocfromdir(\".\", 6)\n\nif len(tocbody) < 4:\n    print(\"exiting\")\n    sys.exit()\n\nwith open(newtocfile, \"w\") as f:\n    print(\"website:\",file=f)\n    print(\"  sidebar:\", file=f)\n    print(\"    contents:\", file=f)\n    print(createtocfromdir(\".\", 6), file=f)\n\nos.rename(tocfile, backuptocfile)\nos.rename(newtocfile, tocfile)\n\n\n\nFile order\nFile names appear in lexicographic order in the quarto table of contents, so I prefix file names with a number as a way of manually setting the ordering; right now I'm using YYYYMMDDfile.org, based on the thought that I'm trying to do something a bit bloggish, or at least chronologically sequential.\nnbdev recommends its users just use two-digit numerics as prefixes for setting file order. If I end up writing things that are more like articles than journal entries, I will try that."
  }
]